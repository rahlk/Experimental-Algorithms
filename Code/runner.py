from __future__ import print_function, division
from problems.dtlz.dtlz2 import DTLZ2
from algorithms.serial.gale.gale import GALE as GALE_S
from algorithms.parallel.gale.gale import GALE as GALE_P
from algorithms.parallel.gale.gale import run as run_p
from algorithms.serial.de.de import DE as DE_S
from mpi4py import MPI
from time import clock, sleep
from utils.lib import O, report, seed


COMM = MPI.COMM_WORLD
RANK = COMM.rank
SIZE = COMM.size

settings = O(
  runs = 20
)

def _run_parallel():
  model = DTLZ2(3)
  gale = GALE_P(model)
  times, convs, dives = [], [], []
  for i in range(settings.runs):
    print(i)
    start = clock()
    goods = run_p(gale, id = i)
    if RANK == 0:
      times.append(clock() - start)
      convs.append(gale.convergence(goods))
      dives.append(gale.diversity(goods))
  if RANK == 0:
    print("Time", times)
    report(times, "Time Taken")
    print("Convergence", convs)
    report(convs, "Convergence")
    print("Diversity", dives)
    report(dives, "Diversity")



def _run_serial():
  times, convs, dives = [], [], []
  for i in range(settings.runs):
    model = DTLZ2(3)
    algo = GALE_S(model)
    start = clock()
    print(i)
    goods = algo.run()
    times.append(clock() - start)
    convs.append(algo.convergence(goods))
    dives.append(algo.diversity(goods))
    algo.solution_range(goods)
  report(times, "Time Taken")
  print("Convergence", convs)
  report(convs, "Convergence")
  print("Diversity", dives)
  report(dives, "Diversity")

def _run_once():
  model = DTLZ2(3)
  de = DE_S(model)
  start = clock()
  goods = de.run()
  delta = clock() - start
  print("Time taken ", delta)
  print(de.convergence(goods))
  print(de.diversity(goods))
  de.solution_range(goods)

DE_T_Serial = [0.415991, 0.4172640000000003, 0.45706999999999987, 0.44896099999999706, 0.4414510000000007, 0.46880500000000325, 0.4597130000000007, 0.4731959999999944, 0.45330200000000076, 0.4496499999999912, 0.43563199999999824, 0.4532509999999945, 0.4503289999999964, 0.452249000000009, 0.44120399999999904, 0.4654170000000022, 0.4507159999999999, 0.4523569999999921, 0.46519999999999584, 0.43960799999999267]
DE_C_Serial = [2.5385316007181199e-05, 2.3418536994411972e-05, 2.3788062745336907e-05, 2.1613902083339628e-05, 2.3976668414068685e-05, 2.3596026056376446e-05, 2.0336834025242928e-05, 2.5909309176883238e-05, 2.0729672510416615e-05, 2.6585743373241287e-05, 2.1602981685093584e-05, 2.2346700949965269e-05, 2.2579422083628548e-05, 2.231760007548548e-05, 2.615552278660041e-05, 2.2513579763014682e-05, 2.2709449680334556e-05, 2.4915527333702019e-05, 2.4278665435833786e-05, 2.6885116330194885e-05]
DE_D_Serial = [0.465499451720295, 0.40800765137869721, 0.41641442775653548, 0.45459640279397984, 0.38857425158301789, 0.4046376492440143, 0.50246526623467103, 0.39077040010466046, 0.43069644523426481, 0.46197950806484039, 0.40565646468430328, 0.50496427308338288, 0.41009249104458678, 0.45683048772634699, 0.38733478737926141, 0.47260830992446817, 0.43135600173608601, 0.40976630540960923, 0.4022971036227318, 0.45361639362286515]

GALE_C_Serial = [0.00056729604392153883, 0.00053732125224924851, 0.00056165869491540184, 0.00056328132114558712, 0.0005461384927896171, 0.00054330508674323174, 0.00055951285570822527, 0.00056254399157593755, 0.00055280878025972262, 0.00056050021578287325, 0.00055152998802990749, 0.00055653315441762724, 0.00054367399441696473, 0.00055059895113961305, 0.00055326260851694159, 0.00054827103179235621, 0.00054584461222821612, 0.00054513375806429943, 0.00056982530765029894, 0.00055331691030538509]
GALE_D_Serial = [0.47332565233052454, 0.42258412639257958, 0.45954695939699947, 0.42743694047243946, 0.36308420887395709, 0.4420007619800963, 0.38370061790934729, 0.35386342045472202, 0.43875383358973863, 0.47481663140229935, 0.3919837219193954, 0.42419621332690505, 0.38590282861970043, 0.34314482743277691, 0.41112315448888914, 0.3646889600361824, 0.42852979653930129, 0.48575991870675439, 0.39071809179923861, 0.33789746641400054]

GALE_C_Parallel = [0.0005434536093313413, 0.00056035057729028582, 0.00055169613115836451, 0.00055040802947250089, 0.00055144253094764801, 0.00055966896528674185, 0.00054187859813855808, 0.00053492389568271406, 0.00055994670882295592, 0.00054716345482162896, 0.00054926853149074096, 0.00054382318764994021, 0.00054118225546392613, 0.00055710465536698735, 0.0005400346521354124, 0.00052480760489697969, 0.00054825004630992976, 0.00056916585699641074, 0.00055102554967036762, 0.0005516437328506674]
GALE_D_Parallel = [0.37304134181992632, 0.39867100115289428, 0.48045563252808826, 0.47544793044728401, 0.46934164103021214, 0.49460768263781113, 0.43958002944335411, 0.39966986877898963, 0.39892159734436505, 0.37497840612537148, 0.40032590073519175, 0.45873573892108988, 0.44506714772084643, 0.43327683387117333, 0.36620067107871662, 0.39820148752888179, 0.37968591203399404, 0.3878440282751196, 0.48554498602467111, 0.45199933605557402]

if __name__ == "__main__":
  _run_serial()
